# --- Force project root into sys.path (before any other imports) ---
import os, sys
from pathlib import Path


ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
if ROOT not in sys.path:
    sys.path.insert(0, ROOT)
# -------------------------------------------------------------------

import json
import streamlit as st
from core.transforms import load_seed, avg_rating_for_book
from core.domain import Rating
from core import functional as fn


st.set_page_config(page_title="Library Recommender", page_icon="üìö", layout="wide")

# –ù–∞–≤–∏–≥–∞—Ü–∏—è
st.sidebar.title("Menu")
page = st.sidebar.radio("Navigation", ["Overview", "Data", "Functional Core", "Tests", "About"], index=1)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if "DATA" not in st.session_state:
    st.session_state["DATA"] = None

DATA = st.session_state["DATA"]

if page == "Data":
    st.header("Data")
    seed_path = Path(__file__).parents[1] / "data" / "seed.json"
    st.code(str(seed_path), language="bash")

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞
    exists = seed_path.exists()
    size = seed_path.stat().st_size if exists else 0
    st.write(f"Exists: {exists}, Size: {size} bytes")

    if exists and size > 0:
        try:
            preview = seed_path.read_text(encoding="utf-8")[:200]
            st.text_area("Preview (first 200 chars)", preview, height=120)
        except Exception as e:
            st.error(f"Cannot read file: {e}")
            
    # –ö–Ω–æ–ø–∫–∞: –∑–∞–≥—Ä—É–∑–∏—Ç—å seed
    if st.button("Load seed", type="primary"):
        try:
            st.session_state["DATA"] = load_seed(str(seed_path))
            st.success("‚úÖ Seed loaded")
        except Exception as e:
            st.error(f"‚ùå {e}")

    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—á—ë—Ç—á–∏–∫–∏
    if st.session_state["DATA"]:
        st.subheader("Counts")
        for k, v in st.session_state["DATA"].items():
            st.write(f"- {k}: {len(v)}")

elif page == "Overview":
    st.header("Overview")
    if not DATA:
        st.info("–ü–µ—Ä–µ–π–¥–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É Data –∏ –Ω–∞–∂–º–∏ ¬´Load seed¬ª.")
    else:
        n_books = len(DATA["books"])
        n_authors = len(DATA["authors"])
        n_users = len(DATA["users"])

        # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É (—Å—Ä–µ–¥–Ω–µ–µ –ø–æ —Å—Ä–µ–¥–Ω–∏–º)
        ratings = tuple(Rating(**r) if isinstance(r, dict) else r for r in DATA["ratings"])
        totals = []
        for b in DATA["books"]:
            bid = b["id"] if isinstance(b, dict) else b.id
            totals.append(avg_rating_for_book(ratings, bid))
        avg_catalog = (sum(totals) / len(totals)) if totals else 0.0

        c1, c2, c3, c4 = st.columns(4)
        c1.metric("#Books", n_books)
        c2.metric("#Authors", n_authors)
        c3.metric("#Users", n_users)
        c4.metric("Avg rating (catalog)", round(avg_catalog, 2))

elif page == "Functional Core":
    st.header("Functional Core")

    DATA = st.session_state.get("DATA")
    if not DATA:
        st.info("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ seed –≤–æ –≤–∫–ª–∞–¥–∫–µ Data.")
        st.stop()

    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞
    books  = DATA["books"]
    ratings = DATA["ratings"]
    reviews = DATA["reviews"]
    loans   = DATA["loans"]
    genres  = DATA["genres"]

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–≤–∏–¥–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ç)
    with st.expander("üîß Debug (types & counts)"):
        st.write({k: len(v) for k, v in DATA.items()})
        st.write("–¢–∏–ø –ø–µ—Ä–≤–æ–≥–æ Book:", type(books[0]).__name__ if books else "‚Äî")
        st.write("–¢–∏–ø –ø–µ—Ä–≤–æ–≥–æ Rating:", type(ratings[0]).__name__ if ratings else "‚Äî")

    # --- –ö–Ω–∏–≥–∏ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º ---
    threshold = st.number_input("–ü–æ—Ä–æ–≥ —Ä–µ–π—Ç–∏–Ω–≥–∞", 0.0, 5.0, 4.0, 0.1, key="thr")
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º ‚â• threshold", key="btn_high"):
        try:
            res = fn.books_with_avg_ge(ratings, books, threshold)
            table = [{"id": b.id, "title": b.title, "year": b.year} for b in res]
            if table:
                st.table(table)
                st.metric("–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥", len(table))
            else:
                st.warning("–ù–µ—Ç –∫–Ω–∏–≥ —Å —Ç–∞–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º")
        except Exception as e:
            st.exception(e)

    # --- –¢–æ–ø-N –∫–Ω–∏–≥ ---
    top_n = st.number_input("–°–∫–æ–ª—å–∫–æ –∫–Ω–∏–≥ –≤ —Ç–æ–ø–µ?", min_value=1, max_value=50, value=5, step=1, key="topn")
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å Top-N –∫–Ω–∏–≥", key="btn_top"):
        try:
            res = fn.top_books_by_avg(ratings, books, int(top_n))
            rows = []
            for bid, avg in res:
                b = next((x for x in books if x.id == bid), None)
                rows.append({"id": bid, "title": b.title if b else "(unknown)", "avg": round(avg, 2)})
            st.dataframe(rows, use_container_width=True)
        except Exception as e:
            st.exception(e)

    # --- –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–π–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    user_id = st.text_input("User ID", "u1", key="uid")
    if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–π–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="btn_loans"):
        try:
            has_loan = fn.user_has_active_loan(loans, user_id)
            (st.success if has_loan else st.error)(f"{user_id}: {'–µ—Å—Ç—å' if has_loan else '–Ω–µ—Ç'} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–π–º–æ–≤")
        except Exception as e:
            st.exception(e)

    # --- –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∂–∞–Ω—Ä–∞ ---
    genre_id = st.text_input("Genre ID", "g1", key="gid")
    book_id  = st.text_input("Book ID", "b1", key="bid")
    if st.button("–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∫–Ω–∏–≥–∞ –∂–∞–Ω—Ä—É (–≤–∫–ª—é—á–∞—è –ø–æ–¥–∂–∞–Ω—Ä—ã)?", key="btn_genre"):
        try:
            book = next((b for b in books if b.id == book_id), None)
            if not book:
                st.error(f"–ö–Ω–∏–≥–∞ {book_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                ok = fn.book_in_genre_recursive(book, genres, genre_id)
                (st.success if ok else st.error)(f"{book.title} ‚Üí {genre_id}: {ok}")
        except Exception as e:
            st.exception(e)


elif page == "Tests":
    st.header("Tests")
    st.write("PYTHONPATH=. pytest -q")

elif page == "About":
    st.header("About")
    st.write("labwork by aituar rinat")
